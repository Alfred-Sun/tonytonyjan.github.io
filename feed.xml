<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不歸路</title>
  <subtitle>簡煒航的個人部落格</subtitle>
  <id>http://tonytonyjan.net</id>
  <link href="http://tonytonyjan.net"/>
  <link href="http://tonytonyjan.net/feed.xml" rel="self"/>
  <updated>2015-02-23T02:34:00+08:00</updated>
  <author>
    <name>大兜</name>
  </author>
  <entry>
    <title>ConFoo 2015 心得</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/02/23/feedback-to-confoo-2015/"/>
    <id>http://tonytonyjan.net/2015/02/23/feedback-to-confoo-2015/</id>
    <published>2015-02-23T02:34:00+08:00</published>
    <updated>2015-02-28T17:16:12+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">
&lt;p&gt;&lt;a href="http://confoo.ca"&gt;&lt;img alt="ConFoo.CA 2015" src="/images/confoo-2015.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;到頭來出國從不為了玩的黃金紀錄仍然保持住了，真傷腦筋啊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;去年，筆者在 Ruby 官方網站看到了加拿大 ConFoo 在徵 Ruby 的稿件，雖然蒙特婁有些遙遠，不過講者享有交通與食宿全免的福利（住在希爾頓酒店），筆者遂小投三篇，結果運氣不錯地&lt;a href="http://confoo.ca/en/speaker/weihang-jian"&gt;上了兩篇&lt;/a&gt;。按照上一篇 Ruby Kaigi 的慣例，先來秀個徽章吧 =)&lt;/p&gt;

</summary>
    <content type="html">
&lt;p&gt;&lt;a href="http://confoo.ca"&gt;&lt;img alt="ConFoo.CA 2015" src="/images/confoo-2015.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;到頭來出國從不為了玩的黃金紀錄仍然保持住了，真傷腦筋啊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;去年，筆者在 Ruby 官方網站看到了加拿大 ConFoo 在徵 Ruby 的稿件，雖然蒙特婁有些遙遠，不過講者享有交通與食宿全免的福利（住在希爾頓酒店），筆者遂小投三篇，結果運氣不錯地&lt;a href="http://confoo.ca/en/speaker/weihang-jian"&gt;上了兩篇&lt;/a&gt;。按照上一篇 Ruby Kaigi 的慣例，先來秀個徽章吧 =)&lt;/p&gt;



&lt;p&gt;&lt;a href="http://confoo.ca/en/speaker/weihang-jian"&gt;&lt;img alt="ConFoo 2015 Speaker" src="/images/confoo-speaker.gif" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這次的旅程對筆者來說有需多值得紀念意義，並且刷了許多「第一次」成就：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;路過北京、上海&lt;/li&gt;
  &lt;li&gt;轉機經驗&lt;/li&gt;
  &lt;li&gt;到西方國家&lt;/li&gt;
  &lt;li&gt;自己規劃出國&lt;/li&gt;
  &lt;li&gt;體驗零下 -15 度、下雪、堆雪人&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但要說收穫最多的，是筆者終於在死前克服了搭飛機的恐懼，非指懼高症，而是對於流程的不安與緊張感，就像小時候時第一次自己搭火車一樣，從月台買票到進入月台到上對火車，即便去年有去日本的經驗，筆者仍然對於流程非常陌生，而這次來回總共搭了六台飛機，不想熟悉也難。&lt;/p&gt;

&lt;p&gt;另外此趟只有損失零錢包與手機，比預料中的情況要好很多，希望下次出國可以挑戰無損歸國。只是不知道三月當了上班族後，是否還有時間可以參與議程，有點可惜。&lt;/p&gt;

&lt;h2 id="confooca"&gt;ConFoo.CA&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://confoo.ca"&gt;ConFoo&lt;/a&gt; 是加拿大蒙特婁每年冬天的大型研討會之一，慣例辦在希爾頓酒店，主題以 Web 技術為主，前身是 PHP 研討會，這幾年才轉為綜合的研討會，這也是為何筆者有機會赴加拿大講 Ruby。&lt;/p&gt;

&lt;p&gt;此外門票約 3 萬台幣左右，3 天 9 軌，141 場講題，88 位講者，且每晚有免費的派對。即便門票如此，還是有接近千位聽眾報名，且無論從講題安排、派對活動、場地、飲食都是個品質很高的研討會。&lt;/p&gt;

&lt;p&gt;建議有興趣的人可以明年投稿看看，大會主辦這幾年開始想將研討會轉型為國際研討會，很歡迎外國人，例如今年除了筆者為台灣代之外，也有來自沙烏地阿拉伯的講者。至於聽眾除了北美，也有南美與歐洲各國的人來參與，你可以很容易的與世界各地的工程師們交流、分享彼此的知識。且大多人都相當友善又樂於交友，氣氛很融洽。&lt;/p&gt;

&lt;h2 id="section"&gt;跟台灣的研討會比較&lt;/h2&gt;

&lt;p&gt;比較筆者過去在台灣參與的研討會，ConFoo 的設計有些很有趣的巧思，例如在名牌上加上 QR code，如果會眾沒有攜帶名片，可以讓別人的手機掃條碼，而條碼內容就是當初會中報名研討會時所輸入的社交網址。即便筆者沒有際會行手機，這個功能還是很吸引人。&lt;/p&gt;

&lt;p&gt;此外除了 9 個講聽以外，有一間最大的會場是預留給社交之用，內有很多桌椅，而每張桌子上面會標有某種特別的技術或領域，例如 PHP、Ruby、Maching Learning、AWS 等，會眾可以透過入座該位子，輕易找到與自己有相同興趣的人交流。&lt;/p&gt;

&lt;h2 id="section-1"&gt;會後小心得&lt;/h2&gt;

&lt;p&gt;筆者這次的主題是 Ruby 上的 C 擴展以及去年在 Ruby Kaigi 講的 Sony Remote Camera API，但可能是個 Web 技術研討會，來聽我的講題的人沒有很多。整個研討會中，光是 PHP 與 Java 的網站應用主題就超過了 7 成，而 C 的主題看過去也只有一場（就是我的），所以看來 ConFoo 要真正從 PHP 研討會歷史中脫出，還需要幾年的時間。&lt;/p&gt;

&lt;p&gt;此外不免小感嘆一下，在台灣不知道除了 godfat 以外，是否有寫 Ruby 的人是拿來做 Rails 以外的應用的，很想認識與交流一下。這年頭就連 PTT 上的 Ruby 版也淪為了 Rails 版，Ruby 論壇成了 Rails 論壇，有些小可惜呢。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2014 回顧</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/01/03/2014-review/"/>
    <id>http://tonytonyjan.net/2015/01/03/2014-review/</id>
    <published>2015-01-03T21:28:00+08:00</published>
    <updated>2015-02-23T02:43:03+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/2015-firework.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;好漂亮的雞毛撢子&lt;/del&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;工作&lt;/th&gt;
      &lt;th&gt;成就&lt;/th&gt;
      &lt;th&gt;日常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;四月&lt;/td&gt;
      &lt;td&gt;成立&lt;a href="/2014/05/30/5xruby-start/"&gt;五倍紅寶石股份有限公司&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubyconf.tw/2014/#speaker-tonytony"&gt;RubyConf Taiwan&lt;/a&gt; 講者、與 Matz 合影&lt;/td&gt;
      &lt;td&gt;&lt;a href="/2014/03/30/house-moving/"&gt;住的地方從 8 坪進化到 30 坪&lt;/a&gt;、&lt;a href="https://www.facebook.com/photo.php?fbid=10152088697477620"&gt;第一次組衣櫃&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;五月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;六月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;買了這輩子看過最大的電視（55 吋）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;七月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;花蓮五日遊，實驗白天旅行，晚上工作的可行性&lt;/td&gt;
      &lt;td&gt;世足通宵派對&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;八月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;九月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubykaigi.org/2014/presentation/S-JianWeihang"&gt;Ruby Kaigi&lt;/a&gt; 講者、第一次搭飛機、第一次去日本&lt;/td&gt;
      &lt;td&gt;烤肉團&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十一月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;25 歲慶生會、開始留鬍子&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十二月&lt;/td&gt;
      &lt;td&gt;與五倍紅寶石拆夥&lt;/td&gt;
      &lt;td&gt;TJDict 上了 &lt;a href="http://free.com.tw/tjdict/"&gt;freeGROUP&lt;/a&gt;，使用人數衝破 17k&lt;/td&gt;
      &lt;td&gt;湯圓大會、聖誕晚會、跨年派對、PS4 派對&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;感覺今年沒什麼在工作，只有在玩樂啊XD&lt;/p&gt;

&lt;p&gt;不過確實自從有客廳和客房之後，家裡三不五時會有聚會。雖然遠了點，至少有一個同樂地方可以吵再晚都沒有人管，且從家徒四壁到現在有電視機、遊戲機、桌遊 6 款、烤箱、沙發床等，明明只有一個人住，室內拖鞋也莫名其妙增加到 4 雙，平時沒去注意，但突然想起來真的覺得頗誇張的XD&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/2015-firework.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;好漂亮的雞毛撢子&lt;/del&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;工作&lt;/th&gt;
      &lt;th&gt;成就&lt;/th&gt;
      &lt;th&gt;日常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;四月&lt;/td&gt;
      &lt;td&gt;成立&lt;a href="/2014/05/30/5xruby-start/"&gt;五倍紅寶石股份有限公司&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubyconf.tw/2014/#speaker-tonytony"&gt;RubyConf Taiwan&lt;/a&gt; 講者、與 Matz 合影&lt;/td&gt;
      &lt;td&gt;&lt;a href="/2014/03/30/house-moving/"&gt;住的地方從 8 坪進化到 30 坪&lt;/a&gt;、&lt;a href="https://www.facebook.com/photo.php?fbid=10152088697477620"&gt;第一次組衣櫃&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;五月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;六月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;買了這輩子看過最大的電視（55 吋）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;七月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;花蓮五日遊，實驗白天旅行，晚上工作的可行性&lt;/td&gt;
      &lt;td&gt;世足通宵派對&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;八月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;九月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubykaigi.org/2014/presentation/S-JianWeihang"&gt;Ruby Kaigi&lt;/a&gt; 講者、第一次搭飛機、第一次去日本&lt;/td&gt;
      &lt;td&gt;烤肉團&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十一月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;25 歲慶生會、開始留鬍子&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十二月&lt;/td&gt;
      &lt;td&gt;與五倍紅寶石拆夥&lt;/td&gt;
      &lt;td&gt;TJDict 上了 &lt;a href="http://free.com.tw/tjdict/"&gt;freeGROUP&lt;/a&gt;，使用人數衝破 17k&lt;/td&gt;
      &lt;td&gt;湯圓大會、聖誕晚會、跨年派對、PS4 派對&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;感覺今年沒什麼在工作，只有在玩樂啊XD&lt;/p&gt;

&lt;p&gt;不過確實自從有客廳和客房之後，家裡三不五時會有聚會。雖然遠了點，至少有一個同樂地方可以吵再晚都沒有人管，且從家徒四壁到現在有電視機、遊戲機、桌遊 6 款、烤箱、沙發床等，明明只有一個人住，室內拖鞋也莫名其妙增加到 4 雙，平時沒去注意，但突然想起來真的覺得頗誇張的XD&lt;/p&gt;



&lt;p&gt;來看一下去年的 &lt;a href="/2014/01/01/2013-hui-gu/"&gt;2013 回顧&lt;/a&gt;的沒有完成的目標：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;帶全家出國玩&lt;/li&gt;
  &lt;li&gt;寫書&lt;/li&gt;
  &lt;li&gt;投稿，並且錄用至少一個研討會&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沒有錢和時間帶全家出國去玩，但有投稿了 RubyConf Taiwan 與 Ruby Kaigi，並且幸運的錄取了，且 2015 的加拿大 ConFoo 也錄取了筆者兩篇講題，雖然今年業績只有一半，但投稿的目標比預期多出了數倍的績效。&lt;/p&gt;

&lt;p&gt;寫書方面還是沒有完成，不過筆者在 2014 最後一天交出了兩百頁的內容到出版社，以為可以告一段落，想不到還有很多需要修改。但運氣好的話，應該 2015 可以出版吧？&lt;/p&gt;

&lt;p&gt;最近因為與五倍紅寶石拆夥，又回到找外包的生活。目前規劃今年把兵役搞定，然後 2016 可以準備出國工作，至於順利與否，且看老天爺XD&lt;/p&gt;

&lt;p&gt;2015 我來了 :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Rails 4.2 重點介紹</title>
    <link rel="alternate" href="http://tonytonyjan.net/2014/12/20/intorduction-to-rails-4-dot-2/"/>
    <id>http://tonytonyjan.net/2014/12/20/intorduction-to-rails-4-dot-2/</id>
    <published>2014-12-20T09:46:11+08:00</published>
    <updated>2014-12-25T20:45:11+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;Rails 團隊終於要在&lt;a href="http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final"&gt;聖誕節&lt;/a&gt;的同時釋出 Rails 4.2 版了，這次更新的重點有以下項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Active Job&lt;/li&gt;
  &lt;li&gt;Asynchronous mails&lt;/li&gt;
  &lt;li&gt;Adequate Record&lt;/li&gt;
  &lt;li&gt;Web Console&lt;/li&gt;
  &lt;li&gt;Foreign key support&lt;/li&gt;
&lt;/ul&gt;

</summary>
    <content type="html">&lt;p&gt;Rails 團隊終於要在&lt;a href="http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final"&gt;聖誕節&lt;/a&gt;的同時釋出 Rails 4.2 版了，這次更新的重點有以下項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Active Job&lt;/li&gt;
  &lt;li&gt;Asynchronous mails&lt;/li&gt;
  &lt;li&gt;Adequate Record&lt;/li&gt;
  &lt;li&gt;Web Console&lt;/li&gt;
  &lt;li&gt;Foreign key support&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id="active-job"&gt;Active Job&lt;/h2&gt;

&lt;p&gt;一個網站常有些較繁重的工作，並不希望在使用者提出請求時立即執行，以寄出一萬封信為例，這也許需要幾分鐘的時間，當使用者點下寄信按鈕時如果還需要等個幾分鐘才可以看到回傳頁面，這將造成糟糕的使用者體驗。&lt;/p&gt;

&lt;p&gt;正規的作法是將這類需要長時間的工作丟到工作佇列去排程，並在背景中執行多個 worker 程序，每個 worker 都會不斷重複從佇列中取得新的工作去執行。&lt;/p&gt;

&lt;p&gt;Rails 已經有許多 gem 可以解決這個問題，著名項目包括 &lt;a href="https://github.com/resque/resque"&gt;Resque&lt;/a&gt;、&lt;a href="http://sidekiq.org/"&gt;Sidekiq&lt;/a&gt; 與 &lt;a href="https://github.com/collectiveidea/delayed_job"&gt;DelayedJob&lt;/a&gt;，其中 Resque 與 Sidekiq 使用 Redis 存放工作住列，DelayedJob 則用關聯式資料庫。&lt;/p&gt;

&lt;p&gt;Active Job 並不是提出了一個新的實作，換句話說，使用 Rails 4.2 並不代表未來就不用安裝 Resque 之類的 gem。&lt;/p&gt;

&lt;p&gt;它的真正意義在於統一使用介面，讓開發者在不同的 gem 之間切換時，可以不用受到 gem 的不同 API 而影響，因而降低重新改寫的成本。&lt;/p&gt;

&lt;p&gt;看到這裡是否覺得這種作法很熟悉？它其實就是適配器模式（Adapter pattern），早在 Active Record 誕生的時候就已經使用相同的技巧，Rails 之所以能以相同的 API 介面在不同的資料庫之間遊走也是拜此所賜。&lt;/p&gt;

&lt;p&gt;目前支援的 gem 有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -1 activejob/lib/active_job/queue_adapters
backburner_adapter.rb
delayed_job_adapter.rb
inline_adapter.rb
qu_adapter.rb
que_adapter.rb
queue_classic_adapter.rb
resque_adapter.rb
sidekiq_adapter.rb
sneakers_adapter.rb
sucker_punch_adapter.rb
test_adapter.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了 &lt;code&gt;test_adapter.rb&lt;/code&gt; 僅用於測試，以及 &lt;code&gt;inline_adapter.rb&lt;/code&gt; 為預設（立即執行，不會丟入背景），以外都有相對的 gem 需要安裝。&lt;/p&gt;

&lt;h3 id="section"&gt;使用方式&lt;/h3&gt;

&lt;p&gt;工作的內容必須定義在 &lt;code&gt;app/jobs/&lt;/code&gt; 下，並繼承自 &lt;code&gt;ActiveJob::Base&lt;/code&gt;，不過 Rails 4.2 提供了產生器，並不一定要手動新增：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g job execute_simulate
      invoke  test_unit
      create    test/jobs/execute_simulate_job_test.rb
      create  app/jobs/execute_simulate_job.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# app/jobs/execute_simulate_job.rb
class ExecuteSimulateJob &amp;lt; ActiveJob::Base
  queue_as :default

  def perform(*args)
    # Do something later
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;queue_as&lt;/code&gt; 可以設定將此工作排進特定的佇列，預設是 &lt;code&gt;default&lt;/code&gt;，可以透過 &lt;code&gt;--queue&lt;/code&gt;&lt;br /&gt;
參數修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g job execute_simulate --queue urgent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用起來像是這樣：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# 將工作丟進佇列
ExecuteSimulateJob.perform_later record

# 排程明天中午再執行
ExecuteSimulateJob.set(wait_until: Date.tomorrow.noon).perform_later(record)

# 排程一週後執行
ExecuteSimulateJob.set(wait: 1.week).perform_later(record)

# 指定特定的佇列
ExecuteSimulateJob.set(queue: :important).perform_later(record)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定要使用的 gem：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# config/application.rb
module YourApp
  class Application &amp;lt; Rails::Application
    # 請確保 Gemfile 已經有安裝所要使用的 gem
    config.active_job.queue_adapter = :resque
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="callback"&gt;回呼（Callback）&lt;/h3&gt;

&lt;p&gt;共有以下 6 個註冊點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;before_enqueue&lt;/li&gt;
  &lt;li&gt;around_enqueue&lt;/li&gt;
  &lt;li&gt;after_enqueue&lt;/li&gt;
  &lt;li&gt;before_perform&lt;/li&gt;
  &lt;li&gt;around_perform&lt;/li&gt;
  &lt;li&gt;after_perform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方式與 controller、model 中的回呼寫法是一樣的：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;class ExecuteSimulateJob &amp;lt; ActiveJob::Base
  queue_as :default
 
  before_enqueue do |job|
    # 在佇列前執行
  end
 
  around_perform do |job, block|
    # 在工作開始前執行
    block.call
    # 在工作完成後執行
  end
 
  def perform
    # Do something later
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="asynchronous-mails"&gt;Asynchronous Mails&lt;/h2&gt;

&lt;p&gt;如果寄信工作也要丟到工作佇列，先別急著寫工作檔，Rails 4.2 的 Action Mailer 內建了 &lt;code&gt;DeliveryJob&lt;/code&gt; 類別，並提供 &lt;code&gt;deliver_later&lt;/code&gt; 方法將寄信工作推進佇列。&lt;/p&gt;

&lt;p&gt;你可以像這樣使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# 使用 #deliver_later 透過 DeliveryJob 來寄信
MyMailer.welcome(@user).deliver_later

# 若不想丟到工作住列，也有 #deliver_now 可以使用
MyMailer.welcome(@user).deliver_now
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="adequate-record"&gt;Adequate Record&lt;/h2&gt;

&lt;p&gt;由 Aaron Patterson 所作，用於提高 &lt;code&gt;#find&lt;/code&gt;、&lt;code&gt;#find_by&lt;/code&gt; 等一些常用查詢指令的速度，可以提升 Active Record 約莫兩倍的效能。&lt;/p&gt;

&lt;p&gt;主要是因為 Active Record 在產生 SQL 過程有很多重複的片段不斷被重新製造，這其實可利用快取將重複的片段保存起來。細節請參考 &lt;a href="http://tenderlovemaking.com/2014/02/19/adequaterecord-pro-like-activerecord.html"&gt;Aaron Patterson 的網誌&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id="web-console"&gt;Web Console&lt;/h2&gt;

&lt;p&gt;如果你有用過 &lt;code&gt;better_errors&lt;/code&gt; gem，那麼這就是類似的東西了。Rails 4.2 在開發環境下的錯誤頁面會多出一個 rails console 命令窗可以使用，除了一般 irb 的功能以外，也可以存取到該次請求中定義的實體與區域變數。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rails 4.2 Web Console" src="/images/web-console.png" /&gt;&lt;/p&gt;

&lt;p&gt;但不只有錯誤頁面才有命令窗可以使用，也可以在任何 view 的檔案中的任何位置加入 &lt;code&gt;&amp;lt;%= console %&amp;gt;&lt;/code&gt;，只要渲染到該檔案，就有命令窗可以使用。&lt;/p&gt;

&lt;h2 id="foreign-keys"&gt;外鍵（Foreign Keys）&lt;/h2&gt;

&lt;p&gt;Rails 4.2 遷移指令支援了 SQL 的外鍵定義功能，目前只有 mysql、mysql2 與 postgresql 可用。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# 將 `articles.author_id` 定義為參考 `authors.id` 的外鍵
add_foreign_key :articles, :authors

# 若命名沒有按照慣例，也可以透過設定達到
# 例如將 `articles.author_id` 定義為參考 `users.lng_id` 的外鍵
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# 刪除 `accounts.branch_id` 外鍵
remove_foreign_key :accounts, :branches
 
# 刪除 `accounts.owner_id` 外鍵
remove_foreign_key :accounts, column: :owner_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這個功能在 migration 與 model 等會產生遷移檔的產生器，當使用到 &lt;code&gt;references&lt;/code&gt; 型別時也會自動的被使用，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g migration add_user_to_posts user:references
      invoke  active_record
      create    db/migrate/20141222180048_add_user_to_posts.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;class AddUserToPosts &amp;lt; ActiveRecord::Migration
  def change
    add_reference :posts, :user, index: true
    add_foreign_key :posts, :users # Rails 4.2 功能
  end
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>RubyKaigi 2014 攻略心得</title>
    <link rel="alternate" href="http://tonytonyjan.net/2014/10/10/rubykaigi-2014-feedback/"/>
    <id>http://tonytonyjan.net/2014/10/10/rubykaigi-2014-feedback/</id>
    <published>2014-10-10T10:29:04+08:00</published>
    <updated>2015-02-23T02:43:54+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="Ruby Kaigi 2014" src="/images/rubykaigi.png"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這輩子截至目前為止出國好像都還不是為了玩，不知幸也不幸。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若說去年是接案維生的一年，今年就是演說生涯的起點吧？自四月的 Ruby Conference Taiwan 擔任講者之後，投稿了日本的 Ruby Kaigi，最後幸運的被錄取了，遂有了這次的出國經驗。&lt;/p&gt;

&lt;h2 id="section"&gt;官方網站&lt;/h2&gt;

&lt;p&gt;大會的&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="Ruby Kaigi 2014" src="/images/rubykaigi.png" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這輩子截至目前為止出國好像都還不是為了玩，不知幸也不幸。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若說去年是接案維生的一年，今年就是演說生涯的起點吧？自四月的 Ruby Conference Taiwan 擔任講者之後，投稿了日本的 Ruby Kaigi，最後幸運的被錄取了，遂有了這次的出國經驗。&lt;/p&gt;

&lt;h2 id="section"&gt;官方網站&lt;/h2&gt;

&lt;p&gt;大會的&lt;a href="http://rubykaigi.org/2014/"&gt;官方網站&lt;/a&gt;是用 &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt; 架設的，不忍說就連本屆的 Logo 也跟 Middleman 長得有點像。筆者因為是講者的緣故被加入了 Ruby Kaigi 官方網站的 GitHub repository，在議程開始的前一個禮拜，那段日子只要訪問 GitHub 就會看到滿滿的日文，且有人發了新的 pull request 我都會收到通知。&lt;/p&gt;

&lt;p&gt;有趣的是，不少 commit message 寫著「fix grammar」。&lt;/p&gt;

&lt;h2 id="section-1"&gt;票價&lt;/h2&gt;

&lt;p&gt;一般會眾 28,000 日幣（相當於 8,000 台幣），覺得貴嗎？貴不貴要看跟什麼比了。畢竟國際上的的研討會票價大約就是落在 5,000 到 10,000 左右。台灣的研討會特色是票價相對便宜，且這麼便宜的情況下竟然還有提供點心與網路，應該也算是一種台灣之光？&lt;/p&gt;

&lt;p&gt;台灣怎麼不拉高價格呢？我覺得是在台灣這樣的票價的研討會是活不下去的，且沒有下午茶點心與網路還會被公幹，自然沒有人敢把票價提升到國際水平。所以 HIT 可以說是台灣的奇蹟研討會。&lt;/p&gt;

&lt;h2 id="section-2"&gt;研討會&lt;/h2&gt;

&lt;p&gt;Ruby Kaigi 的即時口譯做的非常的好，即便台上是日文演講，但透過無線電耳機，幾乎可以聽得懂台上的內容。另外轉場用的背景音樂筆者也非常喜歡，甚至為此整理了 &lt;a href="http://grooveshark.com/#!/playlist/Ruby+Kaigi+2014+Soundtrack/101045969"&gt;Ruby Kaigi 的歌單&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;這幾天我一直被誤認為是日本人，不過似乎也因為這樣得到了不少社交機會，也認識許多朋友。&lt;/p&gt;

&lt;p&gt;特別感謝 Yohei Yasukawa 的幫忙，由於我的演說需要用到有線網路，而這是他幫我溝通處理的，我才有一次完整的演說。這一切都發生在信件的往來，而我是意外在某次午餐與他共桌才與他相認，只能說緣份真是奇妙。&lt;/p&gt;

&lt;h2 id="section-3"&gt;社群生態圈&lt;/h2&gt;

&lt;p&gt;日本的 Ruby 社群相當蓬勃，幾乎每一個都市都有一個社群，光是利用主持人在晚會唱名每一個社群名字的時間，筆者還多吃 3 盤生魚片外加一瓶啤酒。&lt;/p&gt;

&lt;p&gt;台灣的 Ruby 社群我想只有一個 Ruby Taipei 吧？也因為只有一個，所以 Ruby Taiwan 通常也代表 Ruby Taipei。而 Rails 社群就比較多一點，除了台北之外，尚有台南、高雄的社群。&lt;/p&gt;

&lt;p&gt;Rails 是用 Ruby 所建構的，但前者社群明顯比後者蓬勃的多，雖然不是很明白其中所以，但這或許也證明了 Rails 開發者未必會對 Ruby 有興趣吧？&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>C 語言之多行巨集</title>
    <link rel="alternate" href="http://tonytonyjan.net/2014/10/07/multi-line-c-macros/"/>
    <id>http://tonytonyjan.net/2014/10/07/multi-line-c-macros/</id>
    <published>2014-10-07T02:19:13+08:00</published>
    <updated>2015-02-23T02:52:12+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;有時候我們在翻閱原始碼的時候會看到類似這樣的寫法：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;#define FOO(x, y)    \
do {                 \
  typeof(x) tmp = x; \
  x = y;             \
  y = tmp;           \
} while...&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;有時候我們在翻閱原始碼的時候會看到類似這樣的寫法：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;#define FOO(x, y)    \
do {                 \
  typeof(x) tmp = x; \
  x = y;             \
  y = tmp;           \
} while (0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;當然有的人會提出質疑，並且習慣使用邊界區塊（scope block）的寫法：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;#define FOO(x, y)    \
{                    \
  typeof(x) tmp = x; \
  x = y;             \
  y = tmp;           \
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;乍看之下比較漂亮，但事實上後者的寫法有潛在的問題。其實 do/while 的風格只有一個目的，就是將展開的內容變成一個敘述（statement）。讓我們舉個例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;if(condition)
  foo(x, y);
else
  bar(x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前 &lt;code&gt;foo()&lt;/code&gt; 與 &lt;code&gt;bar()&lt;/code&gt; 都是一個標準的 C 函式，可以正常編譯。但如果現在把 &lt;code&gt;foo()&lt;/code&gt; 換成了巨集之後，狀況就不一樣了：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;if(condition)
  FOO(x, y);
else
  bar(x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我們使用的是後者的寫法，經過預編步驟展開之後：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;if(condition)
  {
    typeof(x) tmp = x;
    x = y;
    y = tmp;
  };
else
  bar(x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 因為 &lt;code&gt;FOO(x, y);&lt;/code&gt; 後面的分號，提早終結了，事實上這段程式碼也無法編譯。其中一個解法是把分號拿掉：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;if(condition)
  FOO(x, y)
else
  bar(x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這樣產生的程式碼就可以符合 if/else 的正確語法，可是 &lt;code&gt;FOO(x, y)&lt;/code&gt; 後面沒有分號卻又破壞了程式設計的一致性。所以最後才會出現 do/while 風格的寫法，要注意的是 &lt;code&gt;while(0)&lt;/code&gt; 的後方沒有分號，如果加上了分號，那麼會因為這個分號終結的是 do/while 敘述，導致 &lt;code&gt;FOO(x, y);&lt;/code&gt; 會展開出兩個分號，又出現了剛剛的問題。&lt;/p&gt;

&lt;p&gt;當然，如果你覺得每次多行的巨集都要加個 do/while 其醜無比且又可能會打錯字，筆者建議可以再包裹一層巨集去處理這件事情，別忘了巨集可以當樣板使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;#define STMT( stuff )  do { stuff } while (0)

#define SWAP(x, y)     \
  STMT(                \
    typeof(x) tmp = x; \
    x = y;             \
    y = tmp;           \
  )
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>|=(2 影片下載器</title>
    <link rel="alternate" href="http://tonytonyjan.net/2014/06/28/fcfc-movie-downloader/"/>
    <id>http://tonytonyjan.net/2014/06/28/fcfc-movie-downloader/</id>
    <published>2014-06-28T01:04:26+08:00</published>
    <updated>2015-02-23T02:52:12+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;標題已用 1337 低調處理XD，筆者很喜歡到某站看影片，由於篩選、排序功能需要付費，筆者甚至為此製作了一些工具達到一樣的目的，例如依照收藏次數、評價排序等。不過這次是要分享如何從網站下載一部影片。&lt;/p&gt;

&lt;h2 id="section"&gt;瀏覽器下載法&lt;/h2&gt;

&lt;p&gt;其實有一招不用寫程式就可以下載影片，而且適用在所有影音網站。首先在點選播放影...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;標題已用 1337 低調處理XD，筆者很喜歡到某站看影片，由於篩選、排序功能需要付費，筆者甚至為此製作了一些工具達到一樣的目的，例如依照收藏次數、評價排序等。不過這次是要分享如何從網站下載一部影片。&lt;/p&gt;

&lt;h2 id="section"&gt;瀏覽器下載法&lt;/h2&gt;

&lt;p&gt;其實有一招不用寫程式就可以下載影片，而且適用在所有影音網站。首先在點選播放影片以前，先把瀏覽器的開發者工具打開，接著點下播放，同時觀看 HTTP 的封包狀況，找到一個下載時間最長的請求，就是影片網址。&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/xxx-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;如圖所示，影片下載網址是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://vip.video54000.fc2.com/up/flv/201405/28/b/20140528bpRKSJWR.flv?mid=023358550acbb0cadcf93f50edcfaf5a
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="section-1"&gt;大量下載&lt;/h2&gt;

&lt;p&gt;但如果要大量下載影片的話，瀏覽器這招還是得徒手一個一個把影片點開，這是一件很累的事情，要是有個爬蟲可以幫我做這件事情豈不是很方便嗎？再回顧一下剛剛的網址，可以知道前半段並不難產生，而下載影片的最大重點就在後面的 &lt;code&gt;mid&lt;/code&gt; 到底怎麼來。&lt;/p&gt;

&lt;p&gt;只是這段 &lt;code&gt;023358550acbb0cadcf93f50edcfaf5a&lt;/code&gt; 並沒有在頁面原始碼出現，所以我猜應該是透過網路取得的，幸運的是，沿著影片網址的請求往上找，確實給我找到了一個用來取得網址資訊的請求：&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/xxx-2.png" /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://video.fc2.com/ginfo.php?from=28&amp;amp;otag=0&amp;amp;fversion=MAC%2014%2C0%2C0%2C125&amp;amp;mimi=c5e51ed4de1f4e6246b851bef4a210de&amp;amp;lang=tw&amp;amp;gk=uMuxgWhewb&amp;amp;tk=TlRBeU1qUTNNREE9&amp;amp;href=http%3A%2F%2Fvideo%2Efc2%2Ecom%2Ftw%2Fcontent%2F20140528bpRKSJWR&amp;amp;v=20140528bpRKSJWR&amp;amp;upid=20140528bpRKSJWR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到的回應：&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/xxx-3.png" /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filepath=http://vip.video54000.fc2.com/up/flv/201405/28/b/20140528bpRKSJWR.flv&amp;amp;mid=023358550acbb0cadcf93f50edcfaf5a&amp;amp;sec=71&amp;amp;oref=0&amp;amp;charger=0&amp;amp;charge_second=&amp;amp;err_code=&amp;amp;isadult=0&amp;amp;count=&amp;amp;adreopen=600&amp;amp;cm=1&amp;amp;payment=0&amp;amp;mb_id=60283252&amp;amp;chk_ns=60_256&amp;amp;ci=&amp;amp;play_min=1&amp;amp;play_query=i:0;c:5;f:28;o:0;p:0;u:20140528bpRKSJWR;m:60283252;l:11&amp;amp;test=&amp;amp;ad=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中我要的東西就在這個回應裡面，只要把 &lt;code&gt;filepath&lt;/code&gt; 和 &lt;code&gt;mid&lt;/code&gt; 組起來就可以取得影片網址了。&lt;/p&gt;

&lt;h2 id="section-2"&gt;分析變數&lt;/h2&gt;

&lt;p&gt;眼看就要成功了，接下來只要分析出 &lt;code&gt;/ginfo.php&lt;/code&gt; 的變數怎麼製造即可。筆者是用 &lt;code&gt;curl&lt;/code&gt; 做測試，發現上述的請求可以簡化，只保留 &lt;code&gt;mimi&lt;/code&gt; 與 &lt;code&gt;upid&lt;/code&gt; 這兩個變數：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl "http://video.fc2.com/ginfo.php?mimi=c5e51ed4de1f4e6246b851bef4a210de&amp;amp;upid=20140528bpRKSJWR"
filepath=http://vip.video54000.fc2.com/up/flv/201405/28/b/20140528bpRKSJWR.flv&amp;amp;mid=bd8bf22fae4cba798ae0b028dabc4784&amp;amp;sec=71&amp;amp;oref=1&amp;amp;charger=0&amp;amp;charge_second=&amp;amp;err_code=&amp;amp;isadult=0&amp;amp;count=&amp;amp;adreopen=600&amp;amp;cm=0&amp;amp;payment=0&amp;amp;mb_id=&amp;amp;chk_ns=60_256&amp;amp;title=ブラッシングされたいの？&amp;amp;seek_image=3&amp;amp;play_min=1&amp;amp;play_query=i:0;c:5;f:;o:;p:0;u:20140528bpRKSJWR;m:;l:0&amp;amp;test=&amp;amp;ad=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但這回用 &lt;code&gt;curl&lt;/code&gt; 得到的 &lt;code&gt;mid&lt;/code&gt; 不太一樣，且 &lt;code&gt;filepath&lt;/code&gt; 與 &lt;code&gt;mid&lt;/code&gt; 組起來的網址也無法丟到瀏覽器，&lt;br /&gt;
但是直接用 &lt;code&gt;curl&lt;/code&gt; 是可以下載的，所以猜測 &lt;code&gt;mid&lt;/code&gt; 的產生有用到 &lt;code&gt;User-Agent&lt;/code&gt; 去做雜湊，於是筆者實驗性用了自己瀏覽器的 &lt;code&gt;User-Agent&lt;/code&gt; 丟進 &lt;code&gt;curl&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl "http://video.fc2.com/ginfo.php?mimi=c5e51ed4de1f4e6246b851bef4a210de&amp;amp;upid=20140528bpRKSJWR" -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36'
filepath=http://vip.video54000.fc2.com/up/flv/201405/28/b/20140528bpRKSJWR.flv&amp;amp;mid=023358550acbb0cadcf93f50edcfaf5a&amp;amp;sec=71&amp;amp;oref=1&amp;amp;charger=0&amp;amp;charge_second=&amp;amp;err_code=&amp;amp;isadult=0&amp;amp;count=&amp;amp;adreopen=600&amp;amp;cm=0&amp;amp;payment=0&amp;amp;mb_id=&amp;amp;chk_ns=60_256&amp;amp;title=ブラッシングされたいの？&amp;amp;seek_image=3&amp;amp;play_min=1&amp;amp;play_query=i:0;c:5;f:;o:;p:0;u:20140528bpRKSJWR;m:;l:0&amp;amp;test=&amp;amp;ad=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;賓果，這下 &lt;code&gt;mid&lt;/code&gt; 變數已經一樣了（&lt;code&gt;mid=023358550acbb0cadcf93f50edcfaf5a&lt;/code&gt;），所以由此更可以確定，&lt;code&gt;mid&lt;/code&gt; 的產生完全只有用到，&lt;code&gt;User-Agent&lt;/code&gt; 而已，只要確保下載影片時候送出去的請求，其 &lt;code&gt;User-Agent&lt;/code&gt; 保持一致就沒問題，至此可先鬆一口氣。&lt;/p&gt;

&lt;h2 id="hacking"&gt;Hacking&lt;/h2&gt;

&lt;p&gt;回到剛剛化簡的網址：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://video.fc2.com/ginfo.php?mimi=c5e51ed4de1f4e6246b851bef4a210de&amp;amp;upid=20140528bpRKSJWR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;upid&lt;/code&gt; 是很好產生的，不過 &lt;code&gt;mimi&lt;/code&gt; 並沒有在網站原始碼出現過，且筆者也沒有在任何 HTTP 封包上找到線索。猜測剩下一種可能：這段變數是由 Flash 產生的。然後我翻翻，找到這個：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-as"&gt;public static function makeMimiLocal(_arg1:String):String{
  var _local2:String = "dEgEGrrGeegfe";
  var _local3:String = "gGddgPfeaf_gzyr";
  var _local4:String = "e_egeDEgggEfe";
  return (MD5(((_arg1 + "_") + _local3)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看來這就是製造變數「咪咪」的配方了，試寫一下 Ruby 版本：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def make_mimi(movie_id) # ex. 20140528bpRKSJWR
  # local2 = 'dEgEGrrGeegfe'
  local3 = 'gGddgPfeaf_gzyr'
  # local4 = 'e_egeDEgggEfe'
  Digest::MD5.hexdigest movie_id + '_' + local3
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中有兩個區域變數不知道要幹嘛，順手註解掉了。如果這段程式正確，那麼輸入 &lt;code&gt;20140528bpRKSJWR&lt;/code&gt; 應該會得到一個 &lt;code&gt;c5e51ed4de1f4e6246b851bef4a210de&lt;/code&gt; 才對：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;make_mimi '20140528bpRKSJWR' # =&amp;gt; c5e51ed4de1f4e6246b851bef4a210de
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做了一個下載器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby mimi.rb 20140528bpRKSJWR
$ ls
20140528bpRKSJWR.flv mimi.rb
$ open 20140528bpRKSJWR.flv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="" src="/images/xxx-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;收工，以後可以不用瀏覽器下載這個網站的影片了XD&lt;/p&gt;
</content>
  </entry>
</feed>
